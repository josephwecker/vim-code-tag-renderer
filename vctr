#!/usr/bin/env python

from optparse import OptionParser
import fileinput, sys, re
import hashlib, os, tempfile

HELP_MSG = '''
Given any text file or stdin input, this program will scan it for any
<code...></code> tags with 'lang="..."' attributes.  When it finds any it will
replace it with xhtml that looks exactly like whatever it looks like in your
locally installed gvim.  Whatever is in the 'lang' tag attribute is used as the
filetype.  The xhtml output for each code block is a div with the class
"code."- so have at it.  Keep in mind that if you have line numbers turned on
in vim they'll show up here as well, making copying / pasting by viewers a
little problematic.

It stores code snippets in a ./.tmp_vctr_cache directory so that if you are
running it in short iterations it won't have to regenerate every single snippet
(which can take long when launching gvim on some platforms).  It requires gvim
(although you can possibly get it to work with vim).

Reads from stdin if no file specified. Output goes to stdout. If multiple files
are specified they still go to stdout (effectively concatenating them).  Pulls
it all into memory right now because I'm lazy.'''


CODE_RE = r'<code[^>]*?(?:lang="(?P<lang>[^"]*))[^>]*>(?P<cont>.*?)</code>'
CACHE_D = '.tmp_vctr_cache'

comp_check =       False
force_render_all = False
save_to_cache =    True

def calculate_id(lang, cont):
    m = hashlib.md5()
    m.update(lang + cont)
    return str(len(cont)) + '_' + m.hexdigest()

def cleanup(text):
    text = '\n'.join(text.split('\n')[8:-2])
    text = re.sub(r'<body bgcolor="([^"]*)" text="([^"]*)">', \
            r'<div class="code" style="background-color: \1; color: \2">', \
            text)
    return text.replace('</body>','</div>')

def render_code(language, content):
    tmp = tempfile.NamedTemporaryFile()
    tmp.file.write(content)
    tmp.file.flush()
    cmd = '/bin/bash -c \'gvim -X -f +"let use_xhtml=1" +"set filetype=' + \
            language + '" +"syn on" +"run! syntax/2html.vim" +"wq" +"q" ' + \
            tmp.name + "'"
    os.system(cmd)
    cont = open(tmp.name + '.html', 'r').read()
    os.unlink(tmp.name + '.html')
    return cleanup(cont)

def get_rendered(language, content):
    global comp_check
    global force_render_all
    global save_to_cache
    id = calculate_id(language, content)
    cache_loc = os.path.join(CACHE_D, id)
    if not force_render_all and not comp_check and os.path.exists(cache_loc):
        rendered = render_code(language, content)
        existing = open(cache_loc, 'r').read()
        comp_check = True
        force_render_all = rendered != existing
        return rendered
    if not force_render_all and os.path.exists(cache_loc):
        return open(cache_loc, 'r').read()
    rendered = render_code(language, content)
    if save_to_cache:
        open(cache_loc,'w+').write(rendered)
    return rendered

def parse_data(dat):
    re_cb = re.compile(CODE_RE, re.S | re.I)
    for block in re_cb.finditer(dat):
        rendered = get_rendered(block.group('lang'), block.group('cont'))
        dat = dat.replace(block.group(), rendered)
    sys.stdout.write(dat)

def main():
    global comp_check
    global force_render_all
    global save_to_cache
    oparser = OptionParser(usage='Usage: %prog [options] [INPUT-FILE]', description=HELP_MSG)
    # TODO: option for forcing (ignore cache) and for not doing a cache check
    options, args = oparser.parse_args()

    if not os.path.exists(CACHE_D):
        force_render_all = True
        os.mkdir(CACHE_D)

    dat = ''
    for d in fileinput.input(args):
        dat += d
    parse_data(dat)

if __name__ == '__main__':
    main()
